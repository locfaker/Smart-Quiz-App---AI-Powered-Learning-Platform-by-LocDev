version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: smartquiz_postgres
    environment:
      POSTGRES_DB: smartquiz_db
      POSTGRES_USER: smartquiz
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-smartquiz_password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./server/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - smartquiz_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U smartquiz -d smartquiz_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: smartquiz_redis
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis_password}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - smartquiz_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # Smart Quiz Backend API
  backend:
    build:
      context: .
      dockerfile: Dockerfile
      target: backend
    container_name: smartquiz_backend
    environment:
      FLASK_ENV: production
      DATABASE_URL: postgresql://smartquiz:${POSTGRES_PASSWORD:-smartquiz_password}@postgres:5432/smartquiz_db
      REDIS_HOST: redis
      REDIS_PASSWORD: ${REDIS_PASSWORD:-redis_password}
      SECRET_KEY: ${SECRET_KEY:-change-this-in-production}
      JWT_SECRET_KEY: ${JWT_SECRET_KEY:-change-this-jwt-secret}
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      GEMINI_API_KEY: ${GEMINI_API_KEY}
      SENTRY_DSN: ${SENTRY_DSN}
    volumes:
      - ./server/logs:/app/logs
      - ./server/uploads:/app/uploads
    ports:
      - "5000:5000"
    networks:
      - smartquiz_network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Celery Worker for Background Tasks
  celery_worker:
    build:
      context: .
      dockerfile: Dockerfile
      target: backend
    container_name: smartquiz_celery
    command: celery -A app.celery worker --loglevel=info --concurrency=2
    environment:
      FLASK_ENV: production
      DATABASE_URL: postgresql://smartquiz:${POSTGRES_PASSWORD:-smartquiz_password}@postgres:5432/smartquiz_db
      REDIS_HOST: redis
      REDIS_PASSWORD: ${REDIS_PASSWORD:-redis_password}
      CELERY_BROKER_URL: redis://:${REDIS_PASSWORD:-redis_password}@redis:6379/0
      CELERY_RESULT_BACKEND: redis://:${REDIS_PASSWORD:-redis_password}@redis:6379/0
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      GEMINI_API_KEY: ${GEMINI_API_KEY}
    volumes:
      - ./server/logs:/app/logs
    networks:
      - smartquiz_network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped

  # Celery Beat for Scheduled Tasks
  celery_beat:
    build:
      context: .
      dockerfile: Dockerfile
      target: backend
    container_name: smartquiz_celery_beat
    command: celery -A app.celery beat --loglevel=info
    environment:
      FLASK_ENV: production
      DATABASE_URL: postgresql://smartquiz:${POSTGRES_PASSWORD:-smartquiz_password}@postgres:5432/smartquiz_db
      REDIS_HOST: redis
      REDIS_PASSWORD: ${REDIS_PASSWORD:-redis_password}
      CELERY_BROKER_URL: redis://:${REDIS_PASSWORD:-redis_password}@redis:6379/0
      CELERY_RESULT_BACKEND: redis://:${REDIS_PASSWORD:-redis_password}@redis:6379/0
    volumes:
      - ./server/logs:/app/logs
    networks:
      - smartquiz_network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: smartquiz_nginx
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./server/static:/var/www/static:ro
      - ./ssl:/etc/nginx/ssl:ro
    ports:
      - "80:80"
      - "443:443"
    networks:
      - smartquiz_network
    depends_on:
      - backend
    restart: unless-stopped

  # Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: smartquiz_prometheus
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - smartquiz_network
    restart: unless-stopped

  # Grafana for Metrics Visualization
  grafana:
    image: grafana/grafana:latest
    container_name: smartquiz_grafana
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    ports:
      - "3000:3000"
    networks:
      - smartquiz_network
    depends_on:
      - prometheus
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  smartquiz_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16