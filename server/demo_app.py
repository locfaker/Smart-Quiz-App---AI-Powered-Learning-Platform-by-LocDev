"""
Smart Quiz App - Demo Server
Simplified version for demonstration without database dependencies
"""

from flask import Flask, request, jsonify
from flask_cors import CORS
import json
import random
import time
from datetime import datetime

app = Flask(__name__)
CORS(app)

# Sample data for demonstration
SAMPLE_QUESTIONS = {
    "math": {
        "easy": [
            {
                "id": "math_easy_1",
                "question_text": "T√≠nh 2 + 3 = ?",
                "options": ["4", "5", "6", "7"],
                "correct_answer_index": 1,
                "explanation": "2 + 3 = 5. ƒê√¢y l√† ph√©p c·ªông c∆° b·∫£n.",
                "hints": ["ƒê·∫øm tr√™n tay", "2 + 3 nghƒ©a l√† b·∫Øt ƒë·∫ßu t·ª´ 2 v√† ƒë·∫øm th√™m 3 s·ªë"],
                "tags": ["c·ªông", "s·ªë_t·ª±_nhi√™n"]
            },
            {
                "id": "math_easy_2", 
                "question_text": "Trong c√°c s·ªë sau, s·ªë n√†o l√† s·ªë ch·∫µn?",
                "options": ["3", "7", "8", "9"],
                "correct_answer_index": 2,
                "explanation": "8 l√† s·ªë ch·∫µn v√¨ chia h·∫øt cho 2.",
                "hints": ["S·ªë ch·∫µn chia h·∫øt cho 2", "S·ªë ch·∫µn c√≥ t·∫≠n c√πng l√† 0, 2, 4, 6, 8"],
                "tags": ["s·ªë_ch·∫µn", "chia_h·∫øt"]
            }
        ],
        "medium": [
            {
                "id": "math_medium_1",
                "question_text": "Gi·∫£i ph∆∞∆°ng tr√¨nh: 2x + 5 = 13",
                "options": ["x = 3", "x = 4", "x = 5", "x = 6"],
                "correct_answer_index": 1,
                "explanation": "2x + 5 = 13 ‚Üí 2x = 8 ‚Üí x = 4",
                "hints": ["Chuy·ªÉn 5 sang v·∫ø ph·∫£i", "Chia c·∫£ hai v·∫ø cho 2"],
                "tags": ["ph∆∞∆°ng_tr√¨nh", "ƒë·∫°i_s·ªë"]
            }
        ],
        "hard": [
            {
                "id": "math_hard_1",
                "question_text": "T√≠nh ƒë·∫°o h√†m c·ªßa f(x) = x¬≥ + 2x¬≤ - 5x + 1",
                "options": ["3x¬≤ + 4x - 5", "x¬≤ + 4x - 5", "3x¬≤ + 2x - 5", "3x¬≤ + 4x + 5"],
                "correct_answer_index": 0,
                "explanation": "f'(x) = 3x¬≤ + 4x - 5 theo quy t·∫Øc ƒë·∫°o h√†m c∆° b·∫£n.",
                "hints": ["ƒê·∫°o h√†m c·ªßa x^n l√† n*x^(n-1)", "ƒê·∫°o h√†m c·ªßa h·∫±ng s·ªë l√† 0"],
                "tags": ["ƒë·∫°o_h√†m", "gi·∫£i_t√≠ch"]
            }
        ]
    },
    "physics": {
        "easy": [
            {
                "id": "physics_easy_1",
                "question_text": "V·∫≠n t·ªëc √°nh s√°ng trong ch√¢n kh√¥ng l√† bao nhi√™u?",
                "options": ["3√ó10‚Å∏ m/s", "3√ó10‚Å∂ m/s", "3√ó10‚Å∑ m/s", "3√ó10‚Åπ m/s"],
                "correct_answer_index": 0,
                "explanation": "V·∫≠n t·ªëc √°nh s√°ng trong ch√¢n kh√¥ng l√† c = 3√ó10‚Å∏ m/s.",
                "hints": ["ƒê√¢y l√† h·∫±ng s·ªë v·∫≠t l√Ω c∆° b·∫£n", "K√Ω hi·ªáu l√† c"],
                "tags": ["√°nh_s√°ng", "h·∫±ng_s·ªë"]
            }
        ]
    }
}

SUBJECTS = [
    {"id": "math", "name": "To√°n h·ªçc", "icon": "üî¢"},
    {"id": "physics", "name": "V·∫≠t l√Ω", "icon": "‚öõÔ∏è"},
    {"id": "chemistry", "name": "H√≥a h·ªçc", "icon": "üß™"},
    {"id": "biology", "name": "Sinh h·ªçc", "icon": "üß¨"}
]

@app.route('/api/v1/health', methods=['GET'])
def health_check():
    """Health check endpoint"""
    return jsonify({
        'status': 'healthy',
        'timestamp': datetime.utcnow().isoformat(),
        'version': '1.0.0-demo',
        'services': {
            'api': 'healthy',
            'ai_simulation': 'healthy'
        }
    })

@app.route('/api/v1/subjects', methods=['GET'])
def get_subjects():
    """Get available subjects"""
    return jsonify({'subjects': SUBJECTS})

@app.route('/api/v1/questions/generate', methods=['POST'])
def generate_questions():
    """Generate questions (simulated AI)"""
    try:
        data = request.get_json()
        subject = data.get('subject', 'math')
        difficulty = data.get('difficulty', 'easy')
        count = min(data.get('count', 5), 10)  # Max 10 questions
        
        # Simulate AI processing time
        time.sleep(1)
        
        # Get questions from sample data
        subject_questions = SAMPLE_QUESTIONS.get(subject, {})
        difficulty_questions = subject_questions.get(difficulty, [])
        
        if not difficulty_questions:
            return jsonify({'error': f'No questions available for {subject}/{difficulty}'}), 404
        
        # Select random questions
        selected_questions = random.sample(
            difficulty_questions, 
            min(count, len(difficulty_questions))
        )
        
        # Add generation metadata
        response = {
            'questions': selected_questions,
            'generated_at': datetime.utcnow().isoformat(),
            'cached': False,
            'metadata': {
                'subject': subject,
                'difficulty': difficulty,
                'count': len(selected_questions),
                'ai_model': 'demo-simulation',
                'generation_time': '1.0s'
            }
        }
        
        return jsonify(response)
        
    except Exception as e:
        return jsonify({'error': f'Question generation failed: {str(e)}'}), 500

@app.route('/api/v1/feedback/generate', methods=['POST'])
def generate_feedback():
    """Generate AI feedback (simulated)"""
    try:
        data = request.get_json()
        quiz_data = data.get('quiz_data', {})
        answers = data.get('answers', [])
        
        if not answers:
            return jsonify({'error': 'No answers provided'}), 400
        
        # Simulate AI processing
        time.sleep(0.5)
        
        # Calculate basic stats
        correct_count = sum(1 for answer in answers if answer.get('is_correct', False))
        total_questions = len(answers)
        accuracy = (correct_count / total_questions) * 100 if total_questions > 0 else 0
        
        # Generate simulated feedback based on performance
        if accuracy >= 80:
            overall = "Xu·∫•t s·∫Øc! B·∫°n ƒë√£ th·ªÉ hi·ªán s·ª± hi·ªÉu bi·∫øt v·ªØng ch·∫Øc v·ªÅ ch·ªß ƒë·ªÅ n√†y."
            performance_level = "excellent"
            strengths = [
                "N·∫Øm v·ªØng ki·∫øn th·ª©c c∆° b·∫£n",
                "T∆∞ duy logic t·ªët",
                "Kh·∫£ nƒÉng √°p d·ª•ng c√¥ng th·ª©c ch√≠nh x√°c"
            ]
            weaknesses = ["C√≥ th·ªÉ th·ª≠ th√°ch b·∫£n th√¢n v·ªõi ƒë·ªô kh√≥ cao h∆°n"]
            next_difficulty = "hard" if quiz_data.get('difficulty') != 'hard' else 'hard'
        elif accuracy >= 60:
            overall = "T·ªët! B·∫°n ƒë√£ n·∫Øm ƒë∆∞·ª£c ph·∫ßn l·ªõn ki·∫øn th·ª©c, c·∫ßn c·∫£i thi·ªán m·ªôt s·ªë ƒëi·ªÉm."
            performance_level = "good"
            strengths = [
                "Hi·ªÉu ƒë∆∞·ª£c c√°c kh√°i ni·ªám c∆° b·∫£n",
                "C√≥ kh·∫£ nƒÉng gi·∫£i quy·∫øt v·∫•n ƒë·ªÅ"
            ]
            weaknesses = [
                "C·∫ßn √¥n t·∫≠p th√™m m·ªôt s·ªë ch·ªß ƒë·ªÅ",
                "Ch√∫ √Ω ƒë·ªçc k·ªπ ƒë·ªÅ b√†i"
            ]
            next_difficulty = quiz_data.get('difficulty', 'medium')
        else:
            overall = "C·∫ßn c·ªë g·∫Øng th√™m! H√£y √¥n t·∫≠p k·ªπ l·∫°i ki·∫øn th·ª©c c∆° b·∫£n."
            performance_level = "needs_improvement"
            strengths = ["C√≥ tinh th·∫ßn h·ªçc h·ªèi"]
            weaknesses = [
                "C·∫ßn n·∫Øm v·ªØng ki·∫øn th·ª©c c∆° b·∫£n",
                "Luy·ªán t·∫≠p th√™m c√°c b√†i t·∫≠p",
                "T√¨m hi·ªÉu th√™m v·ªÅ l√Ω thuy·∫øt"
            ]
            next_difficulty = "easy"
        
        feedback = {
            'overall_assessment': overall,
            'performance_level': performance_level,
            'strengths': strengths,
            'weaknesses': weaknesses,
            'recommendations': [
                f"√în t·∫≠p th√™m v·ªÅ {quiz_data.get('subject', 'm√¥n h·ªçc n√†y')}",
                "L√†m th√™m b√†i t·∫≠p t∆∞∆°ng t·ª±",
                "T√¨m hi·ªÉu s√¢u h∆°n v·ªÅ c√°c kh√°i ni·ªám ch∆∞a r√µ",
                "Th·ª±c h√†nh ƒë·ªÅu ƒë·∫∑n m·ªói ng√†y",
                "Tham kh·∫£o th√™m t√†i li·ªáu h·ªçc t·∫≠p"
            ],
            'next_difficulty': next_difficulty,
            'study_time_minutes': max(30, 60 - int(accuracy/2)),
            'focus_areas': [quiz_data.get('subject', 'to√°n h·ªçc')],
            'confidence_score': 0.85,
            'motivational_message': "H√£y ti·∫øp t·ª•c c·ªë g·∫Øng! M·ªói b√†i quiz l√† m·ªôt b∆∞·ªõc ti·∫øn trong h√†nh tr√¨nh h·ªçc t·∫≠p c·ªßa b·∫°n."
        }
        
        return jsonify({
            'feedback': feedback,
            'generated_at': datetime.utcnow().isoformat()
        })
        
    except Exception as e:
        return jsonify({'error': f'Feedback generation failed: {str(e)}'}), 500

@app.route('/api/v1/auth/demo-login', methods=['POST'])
def demo_login():
    """Demo login endpoint"""
    data = request.get_json()
    username = data.get('username', 'demo_user')
    
    # Simulate user data
    user_data = {
        'id': 'demo_user_123',
        'username': username,
        'email': f'{username}@demo.com',
        'display_name': f'Demo User ({username})',
        'level': 5,
        'total_xp': 1250,
        'current_streak': 7,
        'created_at': datetime.utcnow().isoformat()
    }
    
    return jsonify({
        'message': 'Demo login successful',
        'user': user_data,
        'access_token': 'demo_token_12345'
    })

@app.route('/api/v1/analytics/demo-stats', methods=['GET'])
def get_demo_stats():
    """Get demo user statistics"""
    stats = {
        'total_quizzes': 25,
        'total_questions': 250,
        'total_correct': 180,
        'average_accuracy': 72.0,
        'total_time_spent': 7200000,  # milliseconds
        'favorite_subject': 'math',
        'weekly_progress': [
            {'date': '2024-01-01', 'questions': 15, 'correct': 12},
            {'date': '2024-01-02', 'questions': 20, 'correct': 16},
            {'date': '2024-01-03', 'questions': 18, 'correct': 14},
            {'date': '2024-01-04', 'questions': 22, 'correct': 18},
            {'date': '2024-01-05', 'questions': 25, 'correct': 20},
            {'date': '2024-01-06', 'questions': 30, 'correct': 24},
            {'date': '2024-01-07', 'questions': 28, 'correct': 22}
        ]
    }
    
    return jsonify({'stats': stats})

@app.errorhandler(404)
def not_found(error):
    return jsonify({'error': 'Endpoint not found'}), 404

@app.errorhandler(500)
def internal_error(error):
    return jsonify({'error': 'Internal server error'}), 500

if __name__ == '__main__':
    print("üöÄ Starting Smart Quiz Demo Server...")
    print("üìä Available endpoints:")
    print("   GET  /api/v1/health - Health check")
    print("   GET  /api/v1/subjects - Get subjects")
    print("   POST /api/v1/questions/generate - Generate questions")
    print("   POST /api/v1/feedback/generate - Generate feedback")
    print("   POST /api/v1/auth/demo-login - Demo login")
    print("   GET  /api/v1/analytics/demo-stats - Demo statistics")
    print("\nüåê Server running at: http://localhost:5000")
    print("üì± Ready for Android app connection!")
    
    app.run(host='0.0.0.0', port=5000, debug=True)